(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{388:function(a,e,s){"use strict";s.r(e);var t=s(42),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[a._v("#")]),a._v(" webpack")]),a._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("p",[a._v("webpack* 是一个现代 JavaScript 应用程序的"),s("em",[a._v("静态模块打包器(module bundler)")]),a._v("。当 webpack 处理应用程序时，它会递归地构建一个"),s("em",[a._v("依赖关系图(dependency graph)")]),a._v("，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 *bundle*（ 分块束 ）")]),a._v(" "),s("p",[a._v("Webpack 底层是由 Node.js 来开发的，也就是说 Webpack 的配置文件都是 Node.js 文件")]),a._v(" "),s("h2",{attrs:{id:"loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[a._v("#")]),a._v(" loader")]),a._v(" "),s("p",[a._v("Loader 可以看作具有文件转换功能的翻译员，配置里的 "),s("code",[a._v("module.rules")]),a._v(" 数组配置了一组规则，")]),a._v(" "),s("p",[a._v("告诉 Webpack 在遇到哪些文件时使用哪些 Loader 去加载和转换。（因为 webpack 自身只理解 JavaScript）")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"常用-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-loader"}},[a._v("#")]),a._v(" 常用 loader")]),a._v(" "),s("h3",{attrs:{id:"css-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-类"}},[a._v("#")]),a._v(" css 类")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"css-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-loader"}},[a._v("#")]),a._v(" css-loader")]),a._v(" "),s("p",[a._v("解释"),s("code",[a._v("@import")]),a._v(" 和 "),s("code",[a._v("url()")]),a._v("，会 "),s("code",[a._v("import/require()")]),a._v(" 后再解析它们。")]),a._v(" "),s("p",[s("code",[a._v("css-loader")]),a._v("前应用了"),s("code",[a._v("loader")]),a._v("需要指定"),s("code",[a._v("importLoaders")]),a._v("选项")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"less-loader-sass-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#less-loader-sass-loader"}},[a._v("#")]),a._v(" less-loader / sass-loader")]),a._v(" "),s("p",[a._v("解析 less、scss 为 css 文件")])])]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"js-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-类"}},[a._v("#")]),a._v(" JS 类")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"babel-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel-loader"}},[a._v("#")]),a._v(" babel-loader")]),a._v(" "),s("p",[s("code",[a._v("babel-loader")]),a._v("基于"),s("code",[a._v("babel")]),a._v("，用于解析"),s("code",[a._v("JavaScript")]),a._v("文件。")]),a._v(" "),s("p",[s("code",[a._v("babel")]),a._v("有丰富的预设和插件，"),s("code",[a._v("babel")]),a._v("的配置可以直接写到"),s("code",[a._v("options")]),a._v("里或者单独写道配置文件里。")]),a._v(" "),s("p",[s("code",[a._v("babel")]),a._v("常用的预设有"),s("code",[a._v("@babel/preset-env")]),a._v("、"),s("code",[a._v("@babel/plugin-proposal-class-properties")]),a._v("等；")])])]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"其他资源-图片、字体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他资源-图片、字体"}},[a._v("#")]),a._v(" 其他资源（图片、字体）")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"file-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-loader"}},[a._v("#")]),a._v(" file-loader")]),a._v(" "),s("p",[a._v("告诉"),s("code",[a._v("Webpack")]),a._v("引用的模块是一个文件，并返回其打包后的"),s("code",[a._v("url")])])]),a._v(" "),s("li",[s("h3",{attrs:{id:"url-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#url-loader"}},[a._v("#")]),a._v(" url-loader")]),a._v(" "),s("p",[a._v("作用与"),s("code",[a._v("file-loader")]),a._v("类似，但当文件大小（单位 byte）低于指定的限制时，可以返回一个 DataURL。")])])])])]),a._v(" "),s("h2",{attrs:{id:"webpack-插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-插件"}},[a._v("#")]),a._v(" webpack 插件")]),a._v(" "),s("p",[a._v("Plugin 是用来扩展 Webpack 功能的，通过在构建流程里注入钩子实现，它给 Webpack 带来了很大的灵活性。")]),a._v(" "),s("h3",{attrs:{id:"常用-webpack-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-webpack-plugins"}},[a._v("#")]),a._v(" 常用 webpack plugins")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"html-webpack-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html-webpack-plugin"}},[a._v("#")]),a._v(" html-webpack-plugin")]),a._v(" "),s("p",[a._v("当使用 "),s("code",[a._v("webpack")]),a._v("打包时，创建一个 "),s("code",[a._v("html")]),a._v(" 文件，并把 "),s("code",[a._v("webpack")]),a._v(" 打包后的静态文件自动插入到这个 "),s("code",[a._v("html")]),a._v(" 文件当中。")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"optimization-splitchunks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optimization-splitchunks"}},[a._v("#")]),a._v(" optimization.splitChunks")]),a._v(" "),s("p",[a._v("提取被重复引入的文件，单独生成一个或多个文件，这样避免在多入口重复打包文件。")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"clean-webpack-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clean-webpack-plugin"}},[a._v("#")]),a._v(" clean-webpack-plugin")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"copy-webpack-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#copy-webpack-plugin"}},[a._v("#")]),a._v(" copy-webpack-plugin")])])]),a._v(" "),s("h2",{attrs:{id:"webpack-性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能优化"}},[a._v("#")]),a._v(" webpack 性能优化")]),a._v(" "),s("blockquote",[s("p",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000018493260",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://segmentfault.com/a/1190000018493260"),s("OutboundLink")],1)])]),a._v(" "),s("h3",{attrs:{id:"优化编译速度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化编译速度"}},[a._v("#")]),a._v(" 优化编译速度")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"happypack-并行构建-优化-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#happypack-并行构建-优化-loader"}},[a._v("#")]),a._v(" HappyPack 并行构建 [优化 loader]")]),a._v(" "),s("p",[a._v("**核心原理：**将 webpack 中最耗时的 loader 文件转换操作任务，分解到多个进程中并行处理，从而减少构建时间。")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"paralleluglifyplugin-并行构建-优化压缩文件速度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#paralleluglifyplugin-并行构建-优化压缩文件速度"}},[a._v("#")]),a._v(" ParallelUglifyPlugin 并行构建 [优化压缩文件速度]")]),a._v(" "),s("p",[a._v("**原理：**webpack-parallel-uglify-plugin 能够把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程，从而实现并发编译，进而大幅提升 js 压缩速度")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"dllplugin-提前打包公共依赖-减少打包文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dllplugin-提前打包公共依赖-减少打包文件"}},[a._v("#")]),a._v(" DllPlugin 提前打包公共依赖 [减少打包文件]")]),a._v(" "),s("p",[s("strong",[a._v("原理：")]),a._v(" 1. 将依赖的第三方模块抽离，打包到一个个单独的动态链接库中；")]),a._v(" "),s("p",[a._v("2.当需要导入的模块存在动态链接库中时，让其直接从链接库中获取，而不用再去编译第三方库；")]),a._v(" "),s("p",[a._v("3.这样第三方库就只需要打包一次。")])])]),a._v(" "),s("h2",{attrs:{id:"基础-webpack-概念及属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础-webpack-概念及属性"}},[a._v("#")]),a._v(" 基础 webpack 概念及属性")]),a._v(" "),s("h3",{attrs:{id:"打包文件类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打包文件类型"}},[a._v("#")]),a._v(" 打包文件类型")]),a._v(" "),s("p",[a._v("module / chunk / bundle")]),a._v(" "),s("ol",[s("li",[a._v("对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 "),s("strong",[a._v("module")]),a._v(" ；")]),a._v(" "),s("li",[a._v("当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 "),s("strong",[a._v("chunk")]),a._v(" 文件，webpack 会对这个 chunk 文件进行一些操作；")]),a._v(" "),s("li",[a._v("webpack 处理好 chunk 文件后，最后会输出 "),s("strong",[a._v("bundle")]),a._v(" 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。")])]),a._v(" "),s("p",[a._v("一般来说一个 chunk 对应一个 bundle；")]),a._v(" "),s("p",[a._v("但也有例外，比如用 "),s("code",[a._v("MiniCssExtractPlugin")]),a._v(" 从 chunks 0 中抽离出 "),s("code",[a._v("index.bundle.css")]),a._v(" 文件。")]),a._v(" "),s("p",[a._v("总结：")]),a._v(" "),s("p",[s("code",[a._v("module")]),a._v("，"),s("code",[a._v("chunk")]),a._v(" 和 "),s("code",[a._v("bundle")]),a._v(" 其实就是同一份逻辑代码在不同转换场景下的取了三个名字：")]),a._v(" "),s("p",[a._v("我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。")]),a._v(" "),s("h3",{attrs:{id:"filename"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filename"}},[a._v("#")]),a._v(" filename")]),a._v(" "),s("p",[a._v("filename 用来设置打包后输出的文件名；"),s("a",{attrs:{href:"https://www.webpackjs.com/configuration/output/#output-filename",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方文档"),s("OutboundLink")],1)]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("output: {\n\tfilename: 'js/chunk-[hash].js',\n\\},\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("这里说一下**[hash]、[chunkhash]、[contenthash]**之间的区别；")]),a._v(" "),s("ul",[s("li",[s("h3",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[a._v("#")]),a._v(" hash")]),a._v(" "),s("p",[a._v("hash 计算是跟整个项目的构建相关，生成的 hash 只要项目中有一个文件修改了，所以文件的 hash 都会更改；")])]),a._v(" "),s("li",[s("h3",{attrs:{id:"chunkhash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#chunkhash"}},[a._v("#")]),a._v(" chunkhash")]),a._v(" "),s("p",[a._v("可以理解为热更新，生成规则是"),s("strong",[a._v("根据不同的入口文件(Entry)进行依赖文件解析、构建对应的 chunk，生成对应的哈希值")]),a._v("；所以只要当前 chunk 内容没有更改，是不会重新生成文件名 hash；")]),a._v(" "),s("p",[a._v("这样也有利于客户端缓存；")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);