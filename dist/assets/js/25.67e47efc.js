(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{371:function(e,s,t){"use strict";t.r(s);var _=t(42),v=Object(_.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"服务端鉴权jwt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#服务端鉴权jwt"}},[e._v("#")]),e._v(" 服务端鉴权jwt")]),e._v(" "),t("p",[e._v("今天项目写到了express后台鉴权部分，记录一下关于服务端鉴权的知识；")]),e._v(" "),t("p",[e._v("常用鉴权方式可大致分为"),t("strong",[e._v("有状态")]),e._v("和"),t("strong",[e._v("无状态")]),e._v("两种；")]),e._v(" "),t("ul",[t("li",[t("h3",{attrs:{id:"有状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有状态"}},[e._v("#")]),e._v(" 有状态")]),e._v(" "),t("p",[e._v("常用代表：session-cookie会话方案")])]),e._v(" "),t("li",[t("h3",{attrs:{id:"无状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无状态"}},[e._v("#")]),e._v(" 无状态")]),e._v(" "),t("p",[e._v("常用代表：json-web-token令牌方案")])])]),e._v(" "),t("h2",{attrs:{id:"session-cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie"}},[e._v("#")]),e._v(" session-cookie")]),e._v(" "),t("p",[e._v("传统方案客户端鉴权我们使用的都是"),t("code",[e._v("session-cookie")]),e._v("，即由于HTTP请求是无状态的，我们需要判断每个请求到底对应的是哪些用户发送的，所以通过cookie存储服务端的sesssionID来鉴权；")]),e._v(" "),t("p",[e._v("正是因为要靠服务端来查询用户的信息，所以决定了要实现跨服务器比较困难，这是基于cookie/session应用天生的短板。")]),e._v(" "),t("h3",{attrs:{id:"如何实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现"}},[e._v("#")]),e._v(" 如何实现")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("所以我们在每个用户成功登陆后，给他创建并响应颁发一个随机生成的ID，叫做"),t("code",[e._v("sessionID")]),e._v("；")]),e._v(" "),t("p",[e._v("然后将sessionID和用户信息，作为key-value的形式存储在数据库中（也可能存在缓存，总是需要保存下来）；")])]),e._v(" "),t("li",[t("p",[e._v("当客户端之后再次请求时，需要在"),t("code",[e._v("cookie")]),e._v("带上登录时服务器颁发的"),t("code",[e._v("sessionID")]),e._v(";")])]),e._v(" "),t("li",[t("p",[e._v("服务端接受请求后，将"),t("code",[e._v("cookie")]),e._v("中的"),t("code",[e._v("sessionID")]),e._v("拿出来"),t("strong",[e._v("进行查询")]),e._v("，判断是否有效ID，得到当前请求用户的信息；")])])]),e._v(" "),t("h2",{attrs:{id:"json-web-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json-web-token"}},[e._v("#")]),e._v(" json-web-token")]),e._v(" "),t("p",[e._v("token其实也是为了服务器鉴权而生，和"),t("code",[e._v("session")]),e._v("的实现原理也相似；")]),e._v(" "),t("p",[e._v("他们的区别在于，使用token时服务端不需要存储用户的信息，")]),e._v(" "),t("p",[e._v("而是在用户登录时，直接将用户ID相关的信息直接通过加密算法生成一个"),t("strong",[e._v("令牌token")]),e._v("，直接发送给客户端保存；")]),e._v(" "),t("p",[e._v("这样服务端只需要解码校验token即可，校验通过即证明用户合法，实现了服务端无状态；")]),e._v(" "),t("p",[e._v("服务端无需管理用户信息的存储，就可以知道当前请求是哪个用户发来的（token包含了用户信息）；")]),e._v(" "),t("h3",{attrs:{id:"如何实现-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-2"}},[e._v("#")]),e._v(" 如何实现")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("用户成功登陆后，服务端签发一个经过加密算法，且包含用户信息的token，返回给客户端；")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("express中我们可以使用[jsonwebtoken]这个中间件；\n方便我们进行加密算法及相关过期时间的设置\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("下次用户请求时，需要在请求头带上token；")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("例如，express-jwt在验证TOKEN时，是验证请求头中的`authorization`;\n并且，有专门的标识格式，token前添加Bearer，所以在请求头中就需要带上：\n\nauthorization：Bearer token....\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("客户端接收请求时，实时解码token进行校验，即可判断用户权限；")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("这里我们使用[express-jwt]这个中间件，来验证客户端token；\nexpress-jwt实际内部是对jsonwebtoken做了引用二次封装，\n\n-jsonwebtoken负责加密生成token\n-express-jwt负责解密验证token\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])])]),e._v(" "),t("h2",{attrs:{id:"session和jwt的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session和jwt的区别"}},[e._v("#")]),e._v(" session和jwt的区别")]),e._v(" "),t("p",[e._v("看到一个很形象的例子，可以看出两者的区别：")]),e._v(" "),t("p",[e._v("都是去某个办公室办业务，两种方式的区别就像：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("session：")]),e._v(" "),t("p",[e._v("我发给你一张身份证，但只是一张写着身份证号码的纸片。")]),e._v(" "),t("p",[e._v("你每次来办事，我需要去后台查一下你纸片上的 id 是不是有效。")])]),e._v(" "),t("li",[t("p",[e._v("jwt:")]),e._v(" "),t("p",[e._v("我发给你一张加密的身份证，以后你只要出示这张卡片，我就知道你一定是自己人。")])])]),e._v(" "),t("h2",{attrs:{id:"jwt加强版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jwt加强版"}},[e._v("#")]),e._v(" jwt加强版")]),e._v(" "),t("p",[e._v("实际场景中，如果担心token被盗用问题或优化用户体验，并仍保持jwt的无状态性，可以使用"),t("code",[e._v("refresh_token")]),e._v(";")]),e._v(" "),t("p",[e._v("因为token有效时间过短，可能造成了用户需要频繁登录，体验会很差，若有效期过长又有安全风险，")]),e._v(" "),t("p",[e._v("所以衍生出了双token认证方式；")]),e._v(" "),t("h3",{attrs:{id:"refresh-token-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#refresh-token-token"}},[e._v("#")]),e._v(" refresh_token & token")]),e._v(" "),t("p",[e._v("相当于用户登录时，返回两个token，分别是")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("refresh_token 刷新token")]),e._v(" "),t("p",[e._v("用来刷新access_token，有效期时间较长；")])]),e._v(" "),t("li",[t("p",[e._v("access_token 访问token")]),e._v(" "),t("p",[e._v("为安全起见，有效期设置较短（1h内）")])])]),e._v(" "),t("h3",{attrs:{id:"使用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[e._v("#")]),e._v(" 使用方式")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("用户登录后，返回两个token")]),e._v(" "),t("p",[e._v("在访问资源接口时，和常规一样带上"),t("code",[e._v("access_token")]),e._v("作为请求头；")])]),e._v(" "),t("li",[t("p",[e._v("当服务端校验access_token失效时（过期），客户端不直接跳出页面到登录页；")]),e._v(" "),t("p",[e._v("而是直接使用"),t("code",[e._v("refresh_token")]),e._v("，请求接口刷新过期的"),t("code",[e._v("access_token")]),e._v("；")]),e._v(" "),t("p",[e._v("客户端使用新的"),t("code",[e._v("access_token")]),e._v("再次访问资源接口；")])]),e._v(" "),t("li",[t("p",[e._v("当"),t("code",[e._v("refresh_token")]),e._v("也到期后，刷新token无效，再将用户弹出至登录页；")])])]),e._v(" "),t("p",[e._v("个人理解，这样除了可以避免用户频繁登录，让用户无感刷新"),t("code",[e._v("access_token")]),e._v("，")]),e._v(" "),t("p",[e._v("并且也可以尽量减少"),t("code",[e._v("access_token")]),e._v("被盗用的风险（因为有效期较短）；")]),e._v(" "),t("p",[e._v("而"),t("code",[e._v("refresh_token")]),e._v("虽然有效期长，但通讯次数少（只有当access过期时，才使用），风险也相应降低；")]),e._v(" "),t("p",[e._v("毕竟没有完美的安全认证系统，只要能尽量减少被攻击机会，制造被攻击难度，即是我们所认为的安全认证；")]),e._v(" "),t("h3",{attrs:{id:"其他方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他方式"}},[e._v("#")]),e._v(" 其他方式")]),e._v(" "),t("p",[e._v("包括在服务端存储"),t("code",[e._v("jwt")]),e._v("白名单或黑名单，即通过"),t("code",[e._v("jwt")]),e._v("解码认证后，再服务端进行token是否有效的查询；")]),e._v(" "),t("p",[e._v("个人认为这种实现方式和传统的"),t("code",[e._v("session")]),e._v("认证区别不大，背离了jwt无状态的优势和原则，所以不详细记录了；")])])}),[],!1,null,null,null);s.default=v.exports}}]);