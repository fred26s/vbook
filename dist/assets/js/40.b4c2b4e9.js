(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{362:function(s,e,n){"use strict";n.r(e);var a=n(42),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"vue-源码结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-源码结构"}},[s._v("#")]),s._v(" vue 源码结构")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("├── scripts ------------------------------- 包含与构建相关的脚本和配置文件\n│   ├── alias.js -------------------------- 源码中使用到的模块导入别名\n│   ├── config.js ------------------------- 项目的构建配置\n├── build --------------------------------- 构建相关的文件，一般情况下我们不需要动\n├── dist ---------------------------------- 构建后文件的输出目录\n├── examples ------------------------------ 存放一些使用Vue开发的应用案例\n├── flow ---------------------------------- JS静态类型检查工具 [Flow](https://flowtype.org/) 的类型声明\n├── package.json\n├── test ---------------------------------- 测试文件\n├── src ----------------------------------- 源码目录\n│   ├── compiler -------------------------- 编译器代码，用来将 template 编译为 render 函数\n│   │   ├── parser ------------------------ 存放将模板字符串转换成元素抽象语法树的代码\n│   │   ├── codegen ----------------------- 存放从抽象语法树(AST)生成render函数的代码\n│   │   ├── optimizer.js ------------------ 分析静态树，优化vdom渲染\n│   ├── core ------------------------------ 存放通用的，平台无关的运行时代码\n│   │   ├── observer ---------------------- 响应式实现，包含数据观测的核心代码\n│   │   ├── vdom -------------------------- 虚拟DOM的 creation 和 patching 的代码\n│   │   ├── instance ---------------------- Vue构造函数与原型相关代码\n│   │   ├── global-api -------------------- 给Vue构造函数挂载全局方法(静态方法)或属性的代码\n│   │   ├── components -------------------- 包含抽象出来的通用组件，目前只有keep-alive\n│   ├── server ---------------------------- 服务端渲染(server-side rendering)的相关代码\n│   ├── platforms ------------------------- 不同平台特有的相关代码\n│   │   ├── weex -------------------------- weex平台支持\n│   │   ├── web --------------------------- web平台支持\n│   │   │   ├── entry-runtime.js ---------------- 运行时构建的入口\n│   │   │   ├── entry-runtime-with-compiler.js -- 独立构建版本的入口\n│   │   │   ├── entry-compiler.js --------------- vue-template-compiler 包的入口文件\n│   │   │   ├── entry-server-renderer.js -------- vue-server-renderer 包的入口文件\n│   ├── sfc ------------------------------- 包含单文件组件(.vue文件)的解析逻辑，用于vue-template-compiler包\n│   ├── shared ---------------------------- 整个代码库通用的代码\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("源码结构主要分为 5 大块：")]),s._v(" "),n("ul",[n("li",[n("h2",{attrs:{id:"compiler"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compiler"}},[s._v("#")]),s._v(" compiler")]),s._v(" "),n("p",[s._v("编译器代码，用来将 template 编译为 render 函数")])]),s._v(" "),n("li",[n("h2",{attrs:{id:"core"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#core"}},[s._v("#")]),s._v(" core")]),s._v(" "),n("p",[s._v("核心代码。存放通用的，平台无关的运行时代码")])]),s._v(" "),n("li",[n("h2",{attrs:{id:"server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[s._v("#")]),s._v(" server")]),s._v(" "),n("p",[s._v("服务端渲染(server-side rendering)的相关代码")])]),s._v(" "),n("li",[n("h2",{attrs:{id:"platforms"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#platforms"}},[s._v("#")]),s._v(" platforms")]),s._v(" "),n("p",[s._v("跨平台实现代码")])]),s._v(" "),n("li",[n("h2",{attrs:{id:"sfc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sfc"}},[s._v("#")]),s._v(" sfc")]),s._v(" "),n("p",[s._v(".vue 文件的解析逻辑，用于 vue-template-compiler")])]),s._v(" "),n("li",[n("h2",{attrs:{id:"shared"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shared"}},[s._v("#")]),s._v(" shared")]),s._v(" "),n("p",[s._v("整个代码库通用的代码")])])]),s._v(" "),n("p",[n("img",{attrs:{src:"//img.joyfred.com/vuepress/vue/vue%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B.png",alt:"vue解析流程"}})]),s._v(" "),n("h2",{attrs:{id:"入口文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#入口文件"}},[s._v("#")]),s._v(" 入口文件")]),s._v(" "),n("p",[s._v("可以看到"),n("code",[s._v("package.json")]),s._v("中脚本 script，使用到了"),n("code",[s._v("rollup")]),s._v(":")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('"scripts": {\n    "dev": "rollup -w -c scripts/config.js --environment TARGET:web-full-dev",\n    "build": "node scripts/build.js",\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("看到"),n("code",[s._v("dev")]),s._v("是使用"),n("code",[s._v("rollup")]),s._v("打包库进行模块处理，执行的文件是"),n("code",[s._v("scripts/config.js")]),s._v(";")]),s._v(" "),n("p",[s._v("进入到这个 config.js 中，看到最下面一行：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("if (process.env.TARGET) {\n  module.exports = genConfig(process.env.TARGET)\n} else {\n  exports.getBuild = genConfig\n  exports.getAllBuilds = () => Object.keys(builds).map(genConfig)\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("能看到通过全局环境变量"),n("code",[s._v("TARGET")]),s._v("来判断了获取的配置参数；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function genConfig (name) {\n  const opts = builds[name]\n\t..... // 使用配置\n}\n\nconst builds = {\n  // Runtime+compiler development build (Browser)\n  'web-full-dev': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),   // 入口文件\n    dest: resolve('dist/vue.js'), // 输出文件\n    format: 'umd',\n    env: 'development',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("可以看到打包的入口文件为"),n("code",[s._v("web/entry-runtime-with-compiler.js")]),s._v(";")]),s._v(" "),n("p",[s._v("这里可以看到实际就是跑了上面项目结构中"),n("code",[s._v("platforms - web - entry-runtime-with-compiler.js")]),s._v("的 web 平台实现代码；")]),s._v(" "),n("p",[s._v("再通过这个 runtime 文件中，可以找到"),n("code",[s._v("Vue")]),s._v("的初始化构造函数文件，")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("src/core/instance/index.js")]),s._v(",这里不赘述，看了源码就可以找到；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { initMixin } from './init'\nimport { stateMixin } from './state'\nimport { renderMixin } from './render'\nimport { eventsMixin } from './events'\nimport { lifecycleMixin } from './lifecycle'\nimport { warn } from '../util/index'\n\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword')\n  }\n  this._init(options)  // 初始化\n}\n\n// 初始化挂在Vue.prototype上各种属性方法\ninitMixin(Vue)         // 给Vue.prototype添加：_init函数,...\nstateMixin(Vue)        // 给Vue.prototype添加：$data属性, $props属性, $set函数, $delete函数, $watch函数,...\neventsMixin(Vue)       // 给Vue.prototype添加：$on函数, $once函数, $off函数, $emit函数, $watch方法,...\nlifecycleMixin(Vue)    // 给Vue.prototype添加: _update方法, $forceUpdate函数, $destroy函数,...\nrenderMixin(Vue)       // 给Vue.prototype添加: $nextTick函数, _render函数,...\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h2",{attrs:{id:"初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[s._v("#")]),s._v(" 初始化")]),s._v(" "),n("p",[s._v("vue 通过在入口文件上挂在 Vue 实例所需的属性和方法，包括一个"),n("code",[s._v("_init")]),s._v("初始化方法；")]),s._v(" "),n("p",[s._v("在"),n("code",[s._v("_init")]),s._v("方法中，初始化生命周期、实例属性、事件、watch 监听、调用"),n("code",[s._v("beforeCreate/ created")]),s._v("钩子；")]),s._v(" "),n("p",[s._v("最后调用了"),n("code",[s._v("vm.$mount")]),s._v("事件； 实现页面挂载调用；")]),s._v(" "),n("p",[s._v("这个"),n("code",[s._v("$mount")]),s._v("事件根据不同平台都有各自的定义实现，我们关注 web 平台的实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//-- src\\platforms\\web\\runtime\\index.js --//\n\nimport { mountComponent } from 'core/instance/lifecycle'\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)        // 实际上就是调用了这个mountComponent()\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("而 mountComponent 做了什么？")]),s._v(" "),n("p",[s._v("这个方法中调用了"),n("code",[s._v("beforeMount / mounted")]),s._v("钩子函数，")]),s._v(" "),n("p",[s._v("并且实例化了一个"),n("code",[s._v("Watcher")]),s._v("，用来监听数据更新，并实时调用"),n("code",[s._v("beforeUpdate")]),s._v(";")]),s._v(" "),n("p",[s._v("可以在"),n("code",[s._v("// src/core/instance/lifecycle.js")]),s._v("中详细阅读源码；")]),s._v(" "),n("h2",{attrs:{id:"依赖收集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖收集"}},[s._v("#")]),s._v(" 依赖收集")]),s._v(" "),n("h2",{attrs:{id:"compile-编译模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compile-编译模板"}},[s._v("#")]),s._v(" compile 编译模板")]),s._v(" "),n("p",[s._v("挂载的 DOM 节点，如 template 模板文件中写的 HTML，都会被"),n("code",[s._v("compile")]),s._v("函数转换为"),n("code",[s._v("render")]),s._v("函数，来让浏览器识别；")]),s._v(" "),n("p",[s._v("看一下"),n("code",[s._v("compile")]),s._v("如何实现：")]),s._v(" "),n("p",[s._v("入口文件在："),n("code",[s._v("src/platform/web/entry-runtime-with-compiler.js")]),s._v(";")]),s._v(" "),n("p",[s._v("追踪其中的``compileToFunctions"),n("code"),s._v("方法，可以找到定义该编译方法的文件在"),n("code",[s._v("src/compiler/index.js")]),s._v(";")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export const createCompiler = createCompilerCreator(function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  const ast = parse(template.trim(), options)    // 解析HTML\n  if (options.optimize !== false) {\n    optimize(ast, options)                    // 优化AST\n  }\n  const code = generate(ast, options)       // 生成render函数\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("这里可以看到有三个重要的过程 "),n("code",[s._v("parse")]),s._v("、"),n("code",[s._v("optimize")]),s._v("、"),n("code",[s._v("generate")]),s._v("，之后生成了 render 方法代码。")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("parse")]),s._v("：会用正则等方式解析 template 模板中的指令、class、style 等数据，形成抽象语法树 AST")]),s._v(" "),n("li",[n("code",[s._v("optimize")]),s._v("：优化 AST，生成模板 AST 树，检测不需要进行 DOM 改变的静态子树，减少 patch 的压力")]),s._v(" "),n("li",[n("code",[s._v("generate")]),s._v("：把 AST 生成 render 方法的代码")])]),s._v(" "),n("h2",{attrs:{id:"observe-响应式化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#observe-响应式化"}},[s._v("#")]),s._v(" observe 响应式化")]),s._v(" "),n("p",[s._v("Vue 中的数据响应式是通过"),n("code",[s._v("Object.defineProperty")]),s._v("来实现的；")]),s._v(" "),n("p",[s._v("代码实现是在"),n("code",[s._v("this._init")]),s._v("的初始化代码中，"),n("code",[s._v("initState()")]),s._v("部分的代码；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// src/core/instance/state.js\n\nexport function initState(vm: Component) {\n  vm._watchers = []\n  const opts = vm.$options\n  if (opts.props) initProps(vm, opts.props)\n  if (opts.methods) initMethods(vm, opts.methods)\n  if (opts.data) {\n    initData(vm)                      // 初始化data数据\n  } else {\n    observe(vm._data = {}, true /* asRootData */)\n  }\n  if (opts.computed) initComputed(vm, opts.computed)\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch)\n  }\n}\n\n....\nfunction initData(vm: Component) {\n  let data = vm.$options.data\n  data = vm._data = typeof data === 'function'\n                    ? getData(data, vm)\n                    : data || {}\n\n  observe(data, true /* asRootData */) // 给data做响应式处理\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("可以看到在"),n("code",[s._v("initData")]),s._v("方法中，最后有比较关键的一行： "),n("code",[s._v("observe(data, true /* asRootData */)")]),s._v(";")]),s._v(" "),n("p",[s._v("这个"),n("code",[s._v("observe")]),s._v("方法就是设置数据响应化的地方；")]),s._v(" "),n("p",[s._v("找到"),n("code",[s._v("src/core/observer/index.js")]),s._v(";")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 外部调用的ovserve方法\nexport function observe (value: any, asRootData: ?boolean): Observer | void {\n  let ob: Observer | void\n  ob = new Observer(value)\n  return ob\n}\n\n\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that have this object as root $data\n\n  constructor (value: any) {\n  \t.....\n    this.value = value\n    .....\n    if (Array.isArray(value)) {\n      if (hasProto) {\n        protoAugment(value, arrayMethods)\n      } else {\n        copyAugment(value, arrayMethods, arrayKeys)\n      }\n      this.observeArray(value)\n    } else {\n      this.walk(value)                   // 这里将传入data对象做处理\n    }\n  }\n\n  /**\n   * 给传入对象每个key-value都设置响应getter/setter\n   */\n  walk (obj: Object) {\n    const keys = Object.keys(obj)\n    for (let i = 0; i < keys.length; i++) {\n      defineReactive(obj, keys[i])                // 主要处理方法\n    }\n  }\n  ......\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br")])]),n("p",[s._v("一步一步终于能看到做了"),n("code",[s._v("Object.defineProperty")]),s._v("的方法了，那就是"),n("code",[s._v("denfineReactive")]),s._v("这个方法；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// src/core/observer/index.js\n\nfunction defineReactive (obj, key, val) {\n\t// 这里用到了观察者（发布/订阅）模式进行了劫持封装，它定义了一种一对多的关系，\n\t// 让多个观察者监听一个主题对象，这个主题对象的状态发生改变时会通知所有观察者对象，观察者对象就可以更新自己的状态。\n\tconst dep = new Dep()\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter () {\n            /* 进行依赖收集 */\n            return val;\n        },\n        set: function reactiveSetter (newVal) {\n            if (newVal === val) return;\n            dep.notify()                // 触发通知\n        }\n    });\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h2",{attrs:{id:"响应式实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式实现"}},[s._v("#")]),s._v(" 响应式实现")]),s._v(" "),n("p",[s._v("其实响应式系统主要依赖于三部分;")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("Observe")]),s._v(" 类")]),s._v(" "),n("p",[s._v("主要给响应式对象的属性添加 "),n("code",[s._v("getter/setter")]),s._v(" 用于依赖收集与派发更新")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("Dep")]),s._v(" 类")]),s._v(" "),n("p",[s._v("用于收集当前响应式对象的依赖关系")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("Watcher")]),s._v(" 类")]),s._v(" "),n("p",[s._v("观察者，实例分为渲染 watcher、计算属性 watcher、侦听器 watcher 三种")])])]),s._v(" "),n("p",[n("img",{attrs:{src:"//img.joyfred.com/vuepress/vue/observe.webp",alt:"observe"}})]),s._v(" "),n("h3",{attrs:{id:"响应式小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式小结"}},[s._v("#")]),s._v(" 响应式小结：")]),s._v(" "),n("p",[s._v("watcher 有下面几种使用场景：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("render watcher")]),s._v(" 渲染 watcher，渲染视图用的 watcher")]),s._v(" "),n("li",[n("code",[s._v("computed watcher")]),s._v(" 计算属性 watcher，因为计算属性即依赖别人也被人依赖，因此也会持有一个 "),n("code",[s._v("Dep")]),s._v(" 实例")]),s._v(" "),n("li",[n("code",[s._v("watch watcher")]),s._v(" 侦听器 watcher")])]),s._v(" "),n("p",[s._v("只要会被别的观察者 ("),n("code",[s._v("watchers")]),s._v(") 依赖，比如 data、data 的属性、计算属性、props，就会在闭包里生成一个 Dep 的实例 "),n("code",[s._v("dep")]),s._v(" 并在被调用 "),n("code",[s._v("getter")]),s._v(" 的时候 "),n("code",[s._v("dep.depend")]),s._v(" 收集它被谁依赖了，并把被依赖的 watcher 存放到自己的 subs 中 "),n("code",[s._v("this.subs.push(sub)")]),s._v("，以便在自身改变的时候通知 "),n("code",[s._v("notify")]),s._v(" 存放在 "),n("code",[s._v("dep.subs")]),s._v(" 数组中依赖自己的 "),n("code",[s._v("watchers")]),s._v(" 自己改变了，请及时 "),n("code",[s._v("update")]),s._v(" ~")]),s._v(" "),n("p",[s._v("只要依赖别的响应式化对象的对象，都会生成一个观察者 "),n("code",[s._v("watcher")]),s._v(" ，用来统计这个 "),n("code",[s._v("watcher")]),s._v(" 依赖了哪些响应式对象，在这个 "),n("code",[s._v("watcher")]),s._v(" 求值前把当前 "),n("code",[s._v("watcher")]),s._v(" 设置到全局 "),n("code",[s._v("Dep.target")]),s._v("，并在自己依赖的响应式对象发生改变的时候及时 "),n("code",[s._v("update")])]),s._v(" "),n("h2",{attrs:{id:"异步更新和-nexttick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步更新和-nexttick"}},[s._v("#")]),s._v(" 异步更新和 nextTick")]),s._v(" "),n("p",[s._v("引用官网的一段描述，证明 vue 虽然是数据驱动页面，")]),s._v(" "),n("p",[s._v("但其在实现上并不是实时的去改变渲染 DOM，而是将改变的数据 DOM 更新加入到队列中，进行一个 tick 的统一渲染处理；")]),s._v(" "),n("blockquote",[n("p",[s._v("可能你还没有注意到，Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部尝试对异步队列使用原生的 Promise.then 和 MessageChannel，如果执行环境不支持，会采用 setTimeout(fn, 0) 代替。")])]),s._v(" "),n("p",[s._v("在上面的说过当数据添加响应式 setting 后，数据对象会在改变时调用 setting 函数中的"),n("code",[s._v("dep.notify()")]),s._v("进行通知触发；")]),s._v(" "),n("p",[s._v("其本质上是触发了收集依赖器中的每个"),n("code",[s._v("Wathcer")]),s._v("实例的"),n("code",[s._v("update()")]),s._v("方法；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// src\\core\\observer\\dep.js\n\n  notify () {\n    // stabilize the subscriber list first\n    const subs = this.subs.slice()\n    if (process.env.NODE_ENV !== 'production' && !config.async) {\n      // subs aren't sorted in scheduler if not running async\n      // we need to sort them now to make sure they fire in correct\n      // order\n      subs.sort((a, b) => a.id - b.id)\n    }\n    for (let i = 0, l = subs.length; i < l; i++) {\n      subs[i].update()                                  // 触发调用update\n    }\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("而这个被调用的"),n("code",[s._v("update()")]),s._v("方法中，我们可以看到 watcher 实例中进行了判断，")]),s._v(" "),n("p",[s._v("如果非"),n("code",[s._v("lazy")]),s._v("或"),n("code",[s._v("sync")]),s._v("模式，那么就会将此"),n("code",[s._v("watcher")]),s._v("实例推入一个观察者队列(queueWatcher)中;")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// src\\core\\observer\\watcher.js\n\n  update () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n      this.dirty = true\n    } else if (this.sync) {\n      this.run()\n    } else {\n      queueWatcher(this)\n    }\n  }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("本质上"),n("code",[s._v("queueWatcher(this)")]),s._v("，就是将当前 watcher 实例进行去重等一系列判断，并加入到观察者队列(queue)中；")]),s._v(" "),n("p",[s._v("然后在最后将"),n("code",[s._v("flushSchedulerQueue()")]),s._v("方法，推入"),n("code",[s._v("nextTick()")]),s._v("事件队列中；")]),s._v(" "),n("p",[s._v("这里注意，"),n("code",[s._v("flushSchedulerQueue()")]),s._v("方法实际上作用就是执行当前"),n("code",[s._v("queue")]),s._v("队列中的所有"),n("code",[s._v("watcher")]),s._v("实例的"),n("code",[s._v("run")]),s._v("方法，也就是将队列变更都更新至 DOM；")]),s._v(" "),n("p",[s._v("看这里并没有直接调用"),n("code",[s._v("flushSchedulerQueue")]),s._v("，而只是将它推入事件队列；")]),s._v(" "),n("p",[s._v("这里的事件队列(nextTick)是"),n("strong",[s._v("微任务（microTask）")]),s._v("，后面细说；")]),s._v(" "),n("p",[n("strong",[s._v("所以一个事件队列中，相同的"),n("code",[s._v("watcher")]),s._v("实例只会被推入一次，这也可以得出，在一个事件队列中，一个 watcher 实例就算被多次更改，也只会响应更新最后一次，因为事件 handler 只执行一次；")])]),s._v(" "),n("p",[s._v("如果 update 调用时想要推入事件，可"),n("code",[s._v("nextTick")]),s._v("事件队列中事件已经执行了（flushing），那就根据 id 排序直接将更新事件放入进行中的队列(queue)；")]),s._v(" "),n("p",[s._v("但这里不会重新将事件推入"),n("code",[s._v("nextTick")]),s._v("；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// src\\core\\observer\\scheduler.js\n\nexport function queueWatcher (watcher: Watcher) {\n  const id = watcher.id\n  if (has[id] == null) {              // 判断去重\n    has[id] = true\n    if (!flushing) {\n      queue.push(watcher)\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      let i = queue.length - 1\n      while (i > index && queue[i].id > watcher.id) {\n        i--\n      }\n      queue.splice(i + 1, 0, watcher)\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true\n\n      if (process.env.NODE_ENV !== 'production' && !config.async) {\n        flushSchedulerQueue()\n        return\n      }\n      nextTick(flushSchedulerQueue)                // 推入事件队列\n    }\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h2",{attrs:{id:"nexttick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nexttick"}},[s._v("#")]),s._v(" nextTick")]),s._v(" "),n("p",[s._v("在 nextTick 中发生了什么呢？")]),s._v(" "),n("p",[s._v("源码中可以得知，这个方法是将传入的事件都放入了定义的"),n("code",[s._v("callbacks")]),s._v("这个数组中， 这个数组就被定义为"),n("code",[s._v("eventLoop")]),s._v("；")]),s._v(" "),n("p",[s._v("一个事件循环；")]),s._v(" "),n("p",[s._v("然后在一个事件循环开始后，使用"),n("code",[s._v("microTask")]),s._v("的方式（2.6 中优先使用 promise）执行所有"),n("code",[s._v("callbacks")]),s._v("数组中的队列事件；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// src\\core\\util\\next-tick.js\n\nexport function nextTick (cb?: Function, ctx?: Object) {       // 这个就是调用的方法 包括$nextTick\n  let _resolve\n  callbacks.push(() => {             // 将传入事件再放入一个匿名函数中，推入事件队列callbacks\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true       // 开启异步锁\n    timerFunc()         // 执行事件队列  这个方法会根据执行环境（兼容性）选择相应的microTask方法\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n\n\n// 例如使用promise\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {        // 这里就给浏览器中插入一个异步事件（等待同步事件执行后 开始执行）\n    p.then(flushCallbacks)                // 通过promise执行 flushCallbacks函数 也就是开始事件队列\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n}\n\n// 这里是开始执行队列的方法\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {        // 执行队列中所有事件\n    copies[i]()\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br")])]),n("p",[s._v("这里很有趣的一点，就是异步锁"),n("code",[s._v("pending")]),s._v("这个概念；")]),s._v(" "),n("p",[s._v("起初看到这里，不太明白为什么为什么要加一个"),n("code",[s._v("pending")]),s._v("，然后看到一篇文章讲到这部分举了一个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("这里的Pending打个比喻：\n相当于一群旅客准备上车，当第一个旅客上车的时候，车开始发动，准备出发，等到所有旅客都上车后，就可以正式开车了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("啊，有点意思了。解释一下，"),n("strong",[s._v("第一个旅客上车，车开始发动")]),s._v("也就相当于刚进入"),n("code",[s._v("nextTick()")]),s._v("事件时，将"),n("code",[s._v("pending")]),s._v("设为 true，并执行"),n("code",[s._v("timerFunc")]),s._v("方法；")]),s._v(" "),n("p",[s._v("执行"),n("code",[s._v("timerFunc")]),s._v("就相当于发动了车，因为"),n("code",[s._v("timerFunc")]),s._v("在实现中是一个"),n("code",[s._v("promise")]),s._v("函数，也就是一个"),n("code",[s._v("microTask")]),s._v("，执行后就给浏览器插入了一个异步任务；")]),s._v(" "),n("p",[n("strong",[s._v("等到所有旅客都上车后")]),s._v("，这个比喻可以理解为，当异步锁开启后，虽然不再调用"),n("code",[s._v("timerFunc")]),s._v("插入异步任务了，但此时调用"),n("code",[s._v("nextTick")]),s._v("仍可以继续向"),n("code",[s._v("callbacks")]),s._v("事件队列中插入事件；")]),s._v(" "),n("p",[s._v("这时插入的事件，就是发动车时后续上的旅客；")]),s._v(" "),n("p",[s._v("然后当浏览器同步代码任务执行完后，开始执行了异步任务了，也就是我们的"),n("code",[s._v("timerFunc")]),s._v("了，内部就调用了我们的"),n("code",[s._v("flushCallbacks")]),s._v("，这个函数第一句就是将异步锁关闭，也就是开车了！")]),s._v(" "),n("p",[s._v("正式执行这整个事件循环，同时清空之前的事件队列，也就是之后的事件就加入下一个事件队列；")]),s._v(" "),n("p",[s._v("从比喻上来说，可以形象理解成这班车开车了！你再用"),n("code",[s._v("nextTick")]),s._v("加进来的旅客，那就等下一班车吧！")]),s._v(" "),n("p",[s._v("经过这个例子，顿觉醍醐灌顶！也不由得佩服尤大在异步更新上这方面的思维想法！")]),s._v(" "),n("h3",{attrs:{id:"vue-中的微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的微任务"}},[s._v("#")]),s._v(" vue 中的微任务")]),s._v(" "),n("p",[s._v("vue 中"),n("code",[s._v("nextTick")]),s._v("的实现也经过了多次调整，比如 2.5 和 2.6 就进行了调整；")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("2.6 版本优先使用 microtask 作为异步延迟包装器，且写法相对简单。")]),s._v(" "),n("li",[s._v("2.5 版本中，nextTick 的实现是 microTimerFunc、macroTimerFunc 组合实现的，延迟调用优先级是：Promise > setImmediate > MessageChannel > setTimeout，具体见源码。")])])])])}),[],!1,null,null,null);e.default=t.exports}}]);