(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{354:function(s,e,n){"use strict";n.r(e);var a=n(42),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"express"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#express"}},[s._v("#")]),s._v(" express")]),s._v(" "),n("p",[s._v("最流行的nodejs框架；类似的还有koa等")]),s._v(" "),n("p",[s._v("Express应用程序本质上就是一系列中间件函数调用。")]),s._v(" "),n("h2",{attrs:{id:"特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[s._v("#")]),s._v(" 特性")]),s._v(" "),n("ol",[n("li",[s._v("路由系统简单易用")]),s._v(" "),n("li",[s._v("机集众多模板引擎")]),s._v(" "),n("li",[s._v("中间件系统")])]),s._v(" "),n("h2",{attrs:{id:"范例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#范例"}},[s._v("#")]),s._v(" 范例")]),s._v(" "),n("p",[s._v("最简单的web服务器代码：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const express = require('express')\nconst app = express()\n\napp.get('/', (req, res) => {\n  res.send('<h1>fred HomePagefred HomePage</h1>');\n})\n\napp.listen('5050');\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("这样我们就可以访问到了5050端口返回的文本；")]),s._v(" "),n("h2",{attrs:{id:"请求与响应"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#请求与响应"}},[s._v("#")]),s._v(" 请求与响应")]),s._v(" "),n("p",[s._v("上面例子返回响应使用了"),n("code",[s._v("res.send()")]),s._v("这个方法，")]),s._v(" "),n("p",[s._v("这个方法不光可以返回字符串，甚至"),n("code",[s._v("json")]),s._v("、数组等都可以使用他来返回响应；")]),s._v(" "),n("blockquote",[n("p",[s._v("具体详细API参见官网文档："),n("a",{attrs:{href:"https://www.expressjs.com.cn/4x/api.html#express",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.expressjs.com.cn/4x/api.html#express"),n("OutboundLink")],1)])]),s._v(" "),n("h2",{attrs:{id:"路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[s._v("#")]),s._v(" 路由")]),s._v(" "),n("h3",{attrs:{id:"路由传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由传参"}},[s._v("#")]),s._v(" 路由传参")]),s._v(" "),n("p",[s._v("可以通过URL路由，使用请求动态传参；")]),s._v(" "),n("p",[s._v("语法是在路由中使用"),n("code",[s._v(":")]),s._v("这个符号：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("app.get('/:name/get_json/:id', (req, res) => {\n  const params = req.params\n  const str = {\n    name: params.name,\n    color: 'gray',\n    id: params.id\n  }\n  res.send(str);\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("如上面这个示例，例如请求URL为： "),n("code",[s._v("localhost/fred/get_json/123")]),s._v("; 则响应内容为：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n    "name": "fred",\n    "color": "gray",\n    "id": "123"\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("中间件可以通过"),n("code",[s._v("req.params")]),s._v("，来接受URL中传递的参数；")])]),s._v(" "),n("h3",{attrs:{id:"查询字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查询字符串"}},[s._v("#")]),s._v(" 查询字符串")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("app.get('/', (req, res) => {\n  res.send('query:' + req.query.name);   //返回url中的name\n})\n\nURL: localhost?name=fred\nsend: query: name\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("query表示查询字符串的键值对；")]),s._v(" "),n("h3",{attrs:{id:"post传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#post传参"}},[s._v("#")]),s._v(" post传参")]),s._v(" "),n("p",[s._v("参数体传输在express中，需要借助"),n("code",[s._v("body-parse")]),s._v("这个中间件；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const express = require('express')\nconst app = express()\nconst bodyParser = require('body-parser')\napp.use(bodyParser.json())               // 使用中间件\n\napp.post('/', (req, res) => {\n  console.log(req.body)\n  res.send(req.body.name);   // 返回post请求体中的name\n})\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"中间件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[s._v("#")]),s._v(" 中间件")]),s._v(" "),n("p",[s._v("中间件，本质就是位于"),n("strong",[s._v("请求")]),s._v("和"),n("strong",[s._v("响应")]),s._v("这两个过程中间的处理函数，我们可以把它理解为一个从接收到请求，再执行完响应这个过程中间的"),n("strong",[s._v("流水线")]),s._v("；")]),s._v(" "),n("p",[s._v("在这个流水线中，我们可以执行一些影响响应数据的操作，一步一步的执行；")]),s._v(" "),n("p",[s._v("中间件可以不止有一个，多个中间件之间以流水线的形式执行，")]),s._v(" "),n("p",[s._v("a执行完，next()，通知b中间件执行；")]),s._v(" "),n("h3",{attrs:{id:"next逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#next逻辑"}},[s._v("#")]),s._v(" next逻辑")]),s._v(" "),n("p",[s._v("中间件作为管道形式，添加在请求和响应中间；")]),s._v(" "),n("p",[s._v("可以在每一个中间件里，处理请求对象和响应对象；")]),s._v(" "),n("p",[s._v("例如上一个中间件给请求对象添加了时间属性，下一个中间件里就可以拿到时间，并作出响应；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const setDate = (req, res, next) => {\n  req.reqTime = new Date()\n  next()\n}\napp.use(setDate)\n\napp.get('/get_json', (req, res) => {\n  const str = {\n    name: 'fred',\n    date: req.reqTime           // 这里可以获取上一步中间件设置的时间\n  }\n  res.send(str);\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"express路由分组机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#express路由分组机制"}},[s._v("#")]),s._v(" Express路由分组机制")]),s._v(" "),n("blockquote",[n("p",[s._v("Express的路由内部实现比较复杂，这里只挑有关的讲。")]),s._v(" "),n("p",[s._v("Express中，路由是以组的形式添加的。什么意思呢，可以看下面伪代码")]),s._v(" "),n("p",[s._v("app.get('/user/:id', fn1, fn2, fn3);")]),s._v(" "),n("p",[s._v("app.get('/user/:id', fn4, fn5, fn6);")]),s._v(" "),n("p",[s._v("在内部，Express把上面添加的路由，分成了两个组。继续看伪代码，可以看到，路由在内部被分成了两个组。")]),s._v(" "),n("p",[s._v("var stack = [")]),s._v(" "),n("p",[s._v("{path: '/user/:id', fns: [fn1, fn2, fn3], // 路由组1")]),s._v(" "),n("p",[s._v("{path: '/user/:id', fns: [fn4, fn5, fn5] // 路由组2")]),s._v(" "),n("p",[s._v("];")]),s._v(" "),n("p",[s._v("路由匹配就是个遍历的过程，略。")]),s._v(" "),n("p",[s._v("next('route')是干嘛的")]),s._v(" "),n("p",[s._v("答案：跳过当前路由分组中，剩余的handler（中间件）")]),s._v(" "),n("p",[s._v("如果没有next('route')，一路next()调用下去的话，调用顺序是这样的：")]),s._v(" "),n("p",[s._v("fn1 -> fn2 -> fn3 -> fn4 -> fn5 -> fn6")]),s._v(" "),n("p",[s._v("假设某些情况下，在执行了fn1后，想要跳过fn2、fn3，怎么办？（比如楼主举的例子）")]),s._v(" "),n("p",[s._v("答案就是在fn1里调用next('route')。")]),s._v(" "),n("p",[s._v("然后就变成了")]),s._v(" "),n("p",[s._v("fn1 -> fn4 -> fn5 -> fn6")])]),s._v(" "),n("h2",{attrs:{id:"路由器级中间件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由器级中间件"}},[s._v("#")]),s._v(" 路由器级中间件")]),s._v(" "),n("p",[s._v("可以使用"),n("code",[s._v("express.Router()")]),s._v(",来新建局部路由器级中间件；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// admin.js\nvar app = express()\nvar router = express.Router()\n\n// 如果访问 localhost/0 跳入下一个路由组，返回special\nrouter.get('/:id', function (req, res, next) {\n  if (req.params.id === '0') next('route')  // 跳到下一个路由组\n  else next()\n}, function (req, res, next) {\n  if (req.params.id === '1') next('router')  // 跳到下一个路由器\n  else res.send('regular')\n})\n\nrouter.get('/:id', function (req, res, next) {\n  console.log(req.params.id)\n  res.send('special')               // 这里是第二个路由组， 由0跳入\n})\n\n// server.js\nvar app = express()\nconst cellRouter = require('admin.js')\napp.use('/cell', cellRouter, function(req, res, next) {\n    res.send('finally')             // 这里是第二个路由器\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("上面返回结果为：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("localhost/cell/0")]),s._v(" =》返回 "),n("code",[s._v("special")])]),s._v(" "),n("li",[n("code",[s._v("localhost/cell/1")]),s._v(" =》返回 "),n("code",[s._v("finally")])]),s._v(" "),n("li",[n("code",[s._v("localhost/cell/2")]),s._v(" =》返回 "),n("code",[s._v("regular")])])]),s._v(" "),n("p",[n("strong",[s._v("这里先说一下为什么上面例子会按注释的说明执行；")])]),s._v(" "),n("p",[s._v("因为Express中，路由是以组的形式添加的，")]),s._v(" "),n("p",[s._v("上面例子中路由器中，相当于重复定义了两个相同的路由"),n("code",[s._v("/:id")]),s._v("；")]),s._v(" "),n("p",[s._v("第一个路由包含两个路由组；第二个路由是一个路由组；")]),s._v(" "),n("p",[s._v("next('route')，表示跳过当前路由分组中，剩余的中间件handler；")]),s._v(" "),n("p",[s._v("next('router')，表示跳过当前整个路由router，上例跳过router后，就进入了"),n("code",[s._v("/cell")]),s._v("路由的第二个中间件；")])])}),[],!1,null,null,null);e.default=r.exports}}]);